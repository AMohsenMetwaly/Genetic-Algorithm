# Importing libraries
from numpy.random import randint
from numpy.random import rand
import math
import pandas as pd
import numpy as np
import os
import itertools
import random 

# Importing data
data=pd.ExcelFile ("C:/Users/ahmed/OneDrive/Desktop/gatrial/py_measured_width_q.xlsx")
szeged=pd.read_excel (data, "Szeged")
algyo=pd.read_excel (data, "algyo")
mako=pd.read_excel (data, "mako")
# # Szeged
# cw= szeged.drop (columns=["Discharge"])
# cw=np.array (cw)
# cw=np.transpose (cw)
# array_of_tuples = map(tuple, cw)
# cw_tu = tuple(array_of_tuples)
# # Algyo
# cw= algyo.drop (columns=["Discharge"])
# cw=np.array (cw)
# cw=np.transpose (cw)
# array_of_tuples = map(tuple, cw)
# cw_tu = tuple(array_of_tuples)
# Mako
cw= mako.drop (columns=["Discharge"])
cw=np.array (cw)
cw=np.transpose (cw)
array_of_tuples = map(tuple, cw)
cw_tu = tuple(array_of_tuples)

#Required input of GA parameters
# define range for input
bounds = [[36.36959887, 95.34462167], [-0.06661713, 0.111591401], [36.36959887, 95.34462167], [-0.06661713, 0.111591401]]
#min and max discharge bounds 
logqmin=1.477
logqmax=2.91
# define the total iterations (no. genes)
n_iter = 20
# define the population size
n_pop = 10
# crossover rate
r_cross = 0.8
# mutation rate
r_mut=.1
# generated a&b to safe them in csv. file 
final_a1=[]
final_b1 = []
final_a2=[]
final_b2 = []
for n in cw_tu:
    w1= n
    w1_lst=list (w1)
    for l in cw_tu:
        w2=l
        w2_lst=list (w2)
        
        for o in range (len (w1)):
            e=[]
            w=([w1_lst[o], w2_lst[o]])
            e.append (w)
            e=tuple (e)
            for i in e:
                width1=i[0]
                width2=i[1]

                #objective function 
                def objective(x):
                    of=abs((((math.log(width2, 10))-(math.log(x[2],10)))/x[3])-(((math.log(width1, 10))-(math.log(x[0],10)))/x[1]))
                    return of
                #generate random chromosoms
                def popu ():
                    pop=[]
                    rd1=[random.uniform (bounds[0][0], bounds [0][1])]
                    pop.append (rd1)
                    rd2=[random.uniform (bounds[1][0], bounds [1][1])]
                    pop.append (rd2)
                    rd3=[random.uniform (bounds[2][0], bounds [2][1])]
                    pop.append (rd3)
                    rd4=[random.uniform (bounds[3][0], bounds [3][1])]
                    pop.append (rd4)
                    pop_1d=list(itertools.chain.from_iterable(pop))
                    return pop_1d

                #generate list of random chromosoms passed the discharge range
                def pop_new_2 ():
                    pop_n= []
                    global pop_2
                    for r in range (n_pop):
                        initial=popu ()
                        logq1= ((((math.log(width1, 10))-(math.log(initial[0],10)))/initial[1]))
                        logq2= ((((math.log(width2, 10))-(math.log(initial[2],10)))/initial[3]))
                        if logq1>=logqmin and logq1<=logqmax and logq2>=logqmin and logq2<=logqmax:
                            pop_2=initial
                        elif logq1<logqmin or logq1>logqmax or logq2<logqmin or logq2>logqmax:
                            for o in range (10000):
                                initial=popu ()
                                logq1= ((((math.log(width1, 10))-(math.log(initial[0],10)))/initial[1]))
                                logq2= ((((math.log(width2, 10))-(math.log(initial[2],10)))/initial[3]))
                                if logqmin<=logq1<=logqmax and logqmin<=logq2<=logqmax:
                                    pop_2=initial
                                    break
                        pop_n.append (pop_2)
                    return pop_n
                #generate single random chromosom passing the discharge range 
                def pop_new_single ():
                    pop_n= []
                    global pop_2
                    initial=popu ()
                    logq1= ((((math.log(width1, 10))-(math.log(initial[0],10)))/initial[1]))
                    logq2= ((((math.log(width2, 10))-(math.log(initial[2],10)))/initial[3]))
                    if logq1>=logqmin and logq1<=logqmax and logq2>=logqmin and logq2<=logqmax:
                        pop_2=initial
                    elif logq1<logqmin or logq1>logqmax or logq2<logqmin or logq2>logqmax:
                        for o in range (10000):
                            initial=popu ()
                            logq1= ((((math.log(width1, 10))-(math.log(initial[0],10)))/initial[1]))
                            logq2= ((((math.log(width2, 10))-(math.log(initial[2],10)))/initial[3]))
                            if logqmin<=logq1<=logqmax and logqmin<=logq2<=logqmax:
                                pop_2=initial
                                break
                    pop_n.append (pop_2)
                    return pop_n
                # tournament selection
                def selection(pop, scores, k=3):
                    # first random selection
                    selection_ix = randint(len(pop))
                    for ix in randint(0, len(pop), k-1):
                        # check if better (e.g. perform a tournament)
                        if scores[ix] < scores[selection_ix]:
                            selection_ix = ix
                    return pop[selection_ix]
                # crossover two parents to create two children
                def crossover(p1, p2, r_cross):
                    # children are copies of parents by default
                    c1, c2 = p1.copy(), p2.copy()
                    # check for recombination
                    if rand() < r_cross:
                        # select crossover point that is not on the end of the string
                        pt = randint(1, len(p1)-2)
                        # perform crossover
                        c1 = p1[:pt] + p2[pt:]
                        c2 = p2[:pt] + p1[pt:]
                    return [c1, c2]
                # mutation operator
                def mutation(choroms, r_mut):
                    for i in choroms:
                        # check for a mutation
                        if rand() < r_mut:
                            m=pop_new_single ()
                            if i>=bounds [0][0] and i<= bounds [0][1]:
                                i=m [0][0]
                            elif i>=bounds [1][0] and i<= bounds [1][1]:
                                i=m [0][1]
                            elif i>=bounds [2][0] and i<= bounds [2][1]:
                                i=m [0][2]
                            elif i>=bounds [3][0] and i<= bounds [3][1]:
                                i=m [0][3]

                def genetic_algorithm(objective, bounds, n_iter, n_pop, r_cross, r_mut):
                    # initial population of random bitstring
                    pop = pop_new_2 ()
                    # keep track of best solution
                    best, best_eval = 0, objective(pop[0])
                    x= objective(pop[0])
                    y= pop [0]
                    # enumerate generations
                    for gen in range(n_iter):
                        # evaluate all candidates in the population
                        scores = [objective(d) for d in pop]
                        # check for new best solution
                        for i in range(n_pop):
                            if scores[i] < best_eval:
                                best, best_eval = pop[i], scores[i]
                                print(">%d, new best f(%s) = %f" % (gen,  pop[i], scores[i]))
                        # select parents
                        selected = [selection(pop, scores) for _ in range(n_pop)]
                        # create the next generation
                        children = list()
                        for i in range(0, n_pop, 2):
                            # get selected parents in pairs
                            p1, p2 = selected[i], selected[i+1]
                            # crossover and mutation
                            for c in crossover(p1, p2, r_cross):
                                # mutat ion
                                mutation(c, r_mut)
                                # store for next generation
                                children.append(c)
                        # replace population
                        pop = children
                        if best_eval == x:
                            return [y,x]
                        else:
                            return [best, best_eval]
                # perform the genetic algorithm search
                best, score = genetic_algorithm(objective, bounds, n_iter, n_pop, r_cross, r_mut)
                print('Done!')
                print('f(%s) = %f' % (best, score))
                final_a1.append  (best [0])
                final_b1.append  (best [1])
                final_a2.append  (best [2])
                final_b2.append  (best [3])
dict = {'final_a1': final_a1, 'final_b1': final_b1, 'final_a2': final_a2, 'final_b2': final_b2}       
df = pd.DataFrame(dict)     
# saving the dataframe 
df.to_csv('final_a_b_mako.csv') 
